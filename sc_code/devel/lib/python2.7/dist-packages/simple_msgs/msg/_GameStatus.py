# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simple_msgs/GameStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import simple_msgs.msg

class GameStatus(genpy.Message):
  _md5sum = "3c1a9bf389a73be248100bdba5d1e8fd"
  _type = "simple_msgs/GameStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """RegionOccupy[] region_occupy
CastleEnergy[] castle_energy
uint8 red_position
uint8 blue_position
uint8 red_step_move
uint8 blue_step_move
int16 red_score
int16 blue_score
uint8 round_remain_tick
uint8 round_remain_cnt
uint8 round_team

================================================================================
MSG: simple_msgs/RegionOccupy
uint8 status
uint8 belong

================================================================================
MSG: simple_msgs/CastleEnergy
uint8 red_energy
uint8 blue_energy
"""
  __slots__ = ['region_occupy','castle_energy','red_position','blue_position','red_step_move','blue_step_move','red_score','blue_score','round_remain_tick','round_remain_cnt','round_team']
  _slot_types = ['simple_msgs/RegionOccupy[]','simple_msgs/CastleEnergy[]','uint8','uint8','uint8','uint8','int16','int16','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       region_occupy,castle_energy,red_position,blue_position,red_step_move,blue_step_move,red_score,blue_score,round_remain_tick,round_remain_cnt,round_team

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GameStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.region_occupy is None:
        self.region_occupy = []
      if self.castle_energy is None:
        self.castle_energy = []
      if self.red_position is None:
        self.red_position = 0
      if self.blue_position is None:
        self.blue_position = 0
      if self.red_step_move is None:
        self.red_step_move = 0
      if self.blue_step_move is None:
        self.blue_step_move = 0
      if self.red_score is None:
        self.red_score = 0
      if self.blue_score is None:
        self.blue_score = 0
      if self.round_remain_tick is None:
        self.round_remain_tick = 0
      if self.round_remain_cnt is None:
        self.round_remain_cnt = 0
      if self.round_team is None:
        self.round_team = 0
    else:
      self.region_occupy = []
      self.castle_energy = []
      self.red_position = 0
      self.blue_position = 0
      self.red_step_move = 0
      self.blue_step_move = 0
      self.red_score = 0
      self.blue_score = 0
      self.round_remain_tick = 0
      self.round_remain_cnt = 0
      self.round_team = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.region_occupy)
      buff.write(_struct_I.pack(length))
      for val1 in self.region_occupy:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.status, _x.belong))
      length = len(self.castle_energy)
      buff.write(_struct_I.pack(length))
      for val1 in self.castle_energy:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.red_energy, _x.blue_energy))
      _x = self
      buff.write(_get_struct_4B2h3B().pack(_x.red_position, _x.blue_position, _x.red_step_move, _x.blue_step_move, _x.red_score, _x.blue_score, _x.round_remain_tick, _x.round_remain_cnt, _x.round_team))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.region_occupy is None:
        self.region_occupy = None
      if self.castle_energy is None:
        self.castle_energy = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.region_occupy = []
      for i in range(0, length):
        val1 = simple_msgs.msg.RegionOccupy()
        _x = val1
        start = end
        end += 2
        (_x.status, _x.belong,) = _get_struct_2B().unpack(str[start:end])
        self.region_occupy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.castle_energy = []
      for i in range(0, length):
        val1 = simple_msgs.msg.CastleEnergy()
        _x = val1
        start = end
        end += 2
        (_x.red_energy, _x.blue_energy,) = _get_struct_2B().unpack(str[start:end])
        self.castle_energy.append(val1)
      _x = self
      start = end
      end += 11
      (_x.red_position, _x.blue_position, _x.red_step_move, _x.blue_step_move, _x.red_score, _x.blue_score, _x.round_remain_tick, _x.round_remain_cnt, _x.round_team,) = _get_struct_4B2h3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.region_occupy)
      buff.write(_struct_I.pack(length))
      for val1 in self.region_occupy:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.status, _x.belong))
      length = len(self.castle_energy)
      buff.write(_struct_I.pack(length))
      for val1 in self.castle_energy:
        _x = val1
        buff.write(_get_struct_2B().pack(_x.red_energy, _x.blue_energy))
      _x = self
      buff.write(_get_struct_4B2h3B().pack(_x.red_position, _x.blue_position, _x.red_step_move, _x.blue_step_move, _x.red_score, _x.blue_score, _x.round_remain_tick, _x.round_remain_cnt, _x.round_team))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.region_occupy is None:
        self.region_occupy = None
      if self.castle_energy is None:
        self.castle_energy = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.region_occupy = []
      for i in range(0, length):
        val1 = simple_msgs.msg.RegionOccupy()
        _x = val1
        start = end
        end += 2
        (_x.status, _x.belong,) = _get_struct_2B().unpack(str[start:end])
        self.region_occupy.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.castle_energy = []
      for i in range(0, length):
        val1 = simple_msgs.msg.CastleEnergy()
        _x = val1
        start = end
        end += 2
        (_x.red_energy, _x.blue_energy,) = _get_struct_2B().unpack(str[start:end])
        self.castle_energy.append(val1)
      _x = self
      start = end
      end += 11
      (_x.red_position, _x.blue_position, _x.red_step_move, _x.blue_step_move, _x.red_score, _x.blue_score, _x.round_remain_tick, _x.round_remain_cnt, _x.round_team,) = _get_struct_4B2h3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B2h3B = None
def _get_struct_4B2h3B():
    global _struct_4B2h3B
    if _struct_4B2h3B is None:
        _struct_4B2h3B = struct.Struct("<4B2h3B")
    return _struct_4B2h3B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
